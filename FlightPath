#!/usr/bin/env python3
import os
import math
import rclpy
import pandas as pd
import matplotlib.pyplot as plt
from rclpy.node import Node
from px4_msgs.msg import VehicleOdometry
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSHistoryPolicy

class FlightPathPost(Node):
    def __init__(self):
        super().__init__('flight_path_post')

        # parameter for output directory
        self.declare_parameter('output_dir', '/tmp')
        out_dir = self.get_parameter('output_dir').value

        os.makedirs(out_dir, exist_ok=True)
        self.csv_path = os.path.join(out_dir, 'flight_odometry.csv')

        # storage buffers
        self.times = []
        self.xs = []
        self.ys = []
        self.zs = []

        # configure QoS to match PX4 publisher (best effort reliability)
        qos = QoSProfile(
            reliability=QoSReliabilityPolicy.BEST_EFFORT,
            history=QoSHistoryPolicy.KEEP_LAST,
            depth=10
        )

        # subscription to PX4 odometry with compatible QoS
        self.create_subscription(
            VehicleOdometry,
            '/fmu/out/vehicle_odometry',
            self.odom_cb,
            qos
        )

        self.get_logger().info(f"Logging to {self.csv_path}")

    def odom_cb(self, msg: VehicleOdometry):
        # only log NED-frame data
        if msg.pose_frame != VehicleOdometry.POSE_FRAME_NED:
            return
        # filter invalid positions
        if any(math.isnan(v) for v in msg.position):
            return

        # timestamp in seconds
        t = msg.timestamp * 1e-6
        x, y, z = msg.position
        self.times.append(t)
        self.xs.append(x)
        self.ys.append(y)
        self.zs.append(z)

    def save_csv(self):
        df = pd.DataFrame({
            'timestamp_s': self.times,
            'x_m': self.xs,
            'y_m': self.ys,
            'z_m': self.zs,
        })
        df.to_csv(self.csv_path, index=False)
        self.get_logger().info(f"Saved CSV → {self.csv_path}")
        return df

    def plot_path(self, df: pd.DataFrame):
        # simple XY plot of North vs East
        plt.figure()
        plt.plot(df['x_m'], df['y_m'], '-o', markersize=3)
        plt.title('Flight Path (Local NED)')
        plt.xlabel('North (m)')
        plt.ylabel('East (m)')
        plt.axis('equal')
        plt.grid(True)
        plt.show()

    def on_shutdown(self):
        df = self.save_csv()
        if not df.empty:
            self.plot_path(df)
        else:
            self.get_logger().warn("No data recorded; skipping plotting.")


def main(args=None):
    rclpy.init(args=args)
    node = FlightPathPost()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Shutdown requested, processing data…")
    finally:
        node.on_shutdown()
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
