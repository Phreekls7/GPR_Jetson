#!/usr/bin/env python3
import os
import math
import rclpy
import pandas as pd
import matplotlib.pyplot as plt
from rclpy.node import Node
from px4_msgs.msg import VehicleOdometry
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSHistoryPolicy

class FlightPathPost(Node):
    def __init__(self):
        super().__init__('flight_path_post')

        # parameter for output directory
        self.declare_parameter('output_dir', '/tmp')
        out_dir = self.get_parameter('output_dir').value
        os.makedirs(out_dir, exist_ok=True)
        self.csv_path = os.path.join(out_dir, 'flight_odometry.csv')

        # storage buffers
        self.times = []
        self.xs = []
        self.ys = []
        self.zs = []

        # configure QoS to match PX4 publisher (best effort reliability)
        qos = QoSProfile(
            reliability=QoSReliabilityPolicy.BEST_EFFORT,
            history=QoSHistoryPolicy.KEEP_LAST,
            depth=10
        )

        # subscription to PX4 odometry with compatible QoS
        self.create_subscription(
            VehicleOdometry,
            '/fmu/out/vehicle_odometry',
            self.odom_cb,
            qos
        )

        # set up real-time Matplotlib plot
        plt.ion()
        self.fig, self.ax = plt.subplots()
        self.line, = self.ax.plot([], [], '-o', markersize=3)
        self.ax.set_title('Real-time Flight Path (Local NED)')
        self.ax.set_xlabel('North (m)')
        self.ax.set_ylabel('East (m)')
        self.ax.grid(True)
        self.ax.axis('equal')
        plt.show()

        # timer for updating the plot at 10 Hz
        self.create_timer(0.1, self.update_plot)
        self.get_logger().info(f"Logging to {self.csv_path} and plotting in real time")

    def odom_cb(self, msg: VehicleOdometry):
        # only log NED-frame data
        if msg.pose_frame != VehicleOdometry.POSE_FRAME_NED:
            return
        # filter out invalid data
        if any(math.isnan(v) for v in msg.position):
            return

        # timestamp in seconds
        t = msg.timestamp * 1e-6
        x, y, z = msg.position
        self.times.append(t)
        self.xs.append(x)
        self.ys.append(y)
        self.zs.append(z)

    def update_plot(self):
        if not self.xs:
            return
        # update line data
        self.line.set_data(self.xs, self.ys)
        # adjust axes
        self.ax.relim()
        self.ax.autoscale_view()
        # redraw
        self.fig.canvas.draw()
        self.fig.canvas.flush_events()

    def save_csv(self):
        df = pd.DataFrame({
            'timestamp_s': self.times,
            'x_m': self.xs,
            'y_m': self.ys,
            'z_m': self.zs,
        })
        df.to_csv(self.csv_path, index=False)
        self.get_logger().info(f"Saved CSV → {self.csv_path}")
        return df

    def on_shutdown(self):
        df = self.save_csv()
        if df.empty:
            self.get_logger().warn("No data recorded; skipping CSV save.")


def main(args=None):
    rclpy.init(args=args)
    node = FlightPathPost()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info("Shutdown requested, saving data…")
    finally:
        node.on_shutdown()
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
