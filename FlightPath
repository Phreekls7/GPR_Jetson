#!/usr/bin/env python3
import os
import math
import rclpy
import pandas as pd
import matplotlib.pyplot as plt
from geographiclib.geodesic import Geodesic
from rclpy.node import Node
from px4_msgs.msg import VehicleOdometry
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSHistoryPolicy
# New imports for basemap
import geopandas as gpd
from shapely.geometry import Point
import contextily as ctx

class FlightPathPost(Node):
    def __init__(self):
        super().__init__('flight_path_post')

        # static home GPS position
        self.home_lat = 52.0100   # replace with your take-off latitude
        self.home_lon = 4.3600    # replace with your take-off longitude

        # output directory for CSV
        self.declare_parameter('output_dir', '/tmp')
        out_dir = self.get_parameter('output_dir').value
        os.makedirs(out_dir, exist_ok=True)
        self.csv_path = os.path.join(out_dir, 'flight_odometry.csv')

        # data buffers
        self.times = []
        self.xs = []
        self.ys = []
        self.zs = []
        # store geographic
        self.lats = []
        self.lons = []

        # QoS matching PX4 (best effort)
        qos = QoSProfile(
            reliability=QoSReliabilityPolicy.BEST_EFFORT,
            history=QoSHistoryPolicy.KEEP_LAST,
            depth=10
        )

        # subscribe
        self.create_subscription(
            VehicleOdometry,
            '/fmu/out/vehicle_odometry',
            self.odom_cb,
            qos
        )

        # geodetic converter
        self.geod = Geodesic.WGS84

        # prepare Matplotlib interactive plot in Web Mercator
        plt.ion()
        self.fig, self.ax = plt.subplots(figsize=(8,6))
        # initial empty line in mercator coords
        self.line, = self.ax.plot([], [], '-o', markersize=4)
        self.ax.set_title('Real-time Flight Path with OSM Basemap')
        self.ax.set_axis_off()
        plt.tight_layout()
        plt.show()

        self.first_map = True
        # update timer
        self.create_timer(0.5, self.update_plot)
        print("Node started. Real-time map display using Contextily.")

    def odom_cb(self, msg: VehicleOdometry):
        # only NED frame
        if msg.pose_frame != VehicleOdometry.POSE_FRAME_NED:
            return
        # skip invalid
        if any(math.isnan(v) for v in msg.position):
            return

        # record local offsets
        t = msg.timestamp * 1e-6
        x, y, z = msg.position
        self.times.append(t)
        self.xs.append(x)
        self.ys.append(y)
        self.zs.append(z)
        # convert to geo coords
        az = math.degrees(math.atan2(y, x))
        dist = math.hypot(x, y)
        g = self.geod.Direct(self.home_lat, self.home_lon, az, dist)
        self.lats.append(g['lat2'])
        self.lons.append(g['lon2'])

    def update_plot(self):
        if not self.lons:
            return
        # create GeoDataFrame in EPSG:4326
        gdf = gpd.GeoDataFrame(geometry=[Point(lon, lat) for lon,lat in zip(self.lons, self.lats)],
                                crs='EPSG:4326')
        # project to Web Mercator
        gdf = gdf.to_crs(epsg=3857)
        xs_merc = gdf.geometry.x.tolist()
        ys_merc = gdf.geometry.y.tolist()

        # set line
        self.line.set_data(xs_merc, ys_merc)
        # adjust limits
        self.ax.set_xlim(min(xs_merc), max(xs_merc))
        self.ax.set_ylim(min(ys_merc), max(ys_merc))

        # add basemap first update
        if self.first_map:
            ctx.add_basemap(self.ax, source=ctx.providers.OSM)
            self.first_map = False

        # redraw
        self.fig.canvas.draw()
        plt.pause(0.001)

    def save_csv(self):
        df = pd.DataFrame({
            'timestamp_s': self.times,
            'x_m': self.xs,
            'y_m': self.ys,
            'z_m': self.zs,
            'lat': self.lats,
            'lon': self.lons
        })
        df.to_csv(self.csv_path, index=False)
        print(f"Saved CSV → {self.csv_path}")
        return df

    def on_shutdown(self):
        print("Shutting down, saving data…")
        df = self.save_csv()
        if df.empty:
            print("No data recorded.")


def main(args=None):
    rclpy.init(args=args)
    node = FlightPathPost()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        print("Keyboard interrupt received.")
    finally:
        node.on_shutdown()
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
