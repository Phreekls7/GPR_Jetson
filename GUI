import sys
import threading
import math
import rclpy
from rclpy.node import Node
from rclpy.executors import SingleThreadedExecutor

# Messages
from px4_msgs.msg import VehicleOdometry
from sensor_msgs.msg import Image, Range
from cv_bridge import CvBridge

# QoS
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSDurabilityPolicy

# Qt
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget,
                             QVBoxLayout, QLabel, QHBoxLayout,
                             QPushButton)
from PyQt5.QtCore import QTimer, Qt
import pyqtgraph as pg
import numpy as np
import cv2  # for decoding map images

# Map and projection
import requests
import pyproj

class TelemetryGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Drone Telemetry')

        # ROS2 init
        rclpy.init(args=None)
        self.node = Node('telemetry_gui')
        self.executor = SingleThreadedExecutor()
        self.executor.add_node(self.node)
        self.spin_thread = threading.Thread(target=self.executor.spin, daemon=True)
        self.spin_thread.start()

        # Bridge for images
        self.bridge = CvBridge()

        # Running flag
        self.running = False

        # Subscriptions
        qos = QoSProfile(depth=10)
        qos.reliability = QoSReliabilityPolicy.BEST_EFFORT
        qos.durability = QoSDurabilityPolicy.VOLATILE
        self.node.create_subscription(Image, '/gpr/bscan', self.gpr_cb, qos_profile=qos)
        self.node.create_subscription(Range, '/range', self.range_cb, qos_profile=qos)
        self.node.create_subscription(VehicleOdometry,
                                      '/fmu/out/vehicle_odometry',
                                      self.odom_cb,
                                      qos_profile=qos)

        # Data containers
        self.path = []
        self.origin = None
        self.latest_gpr = None
        self.latest_range = None

                # Simple background (plain grid)
        self.plot = pg.PlotWidget(title='Flight Path')
        self.plot.setBackground('w')  # white background
        self.plot.showGrid(x=True, y=True)

        # Build UI
        central = QWidget()
        self.setCentralWidget(central)
        layout = QVBoxLayout(central)

        # Controls: Start / Stop
        ctrl_layout = QHBoxLayout()
        self.start_btn = QPushButton('Start')
        self.start_btn.clicked.connect(self.start_acquisition)
        ctrl_layout.addWidget(self.start_btn)
        self.stop_btn = QPushButton('Stop')
        self.stop_btn.clicked.connect(self.stop_acquisition)
        self.stop_btn.setEnabled(False)
        ctrl_layout.addWidget(self.stop_btn)
        layout.addLayout(ctrl_layout)

        # Top: flight path + range
        top = QHBoxLayout()
        self.plot = pg.PlotWidget(title='Flight Path')
        self.plot.setAspectLocked(True)
        self.plot.enableAutoRange()
        self.plot.addItem(self.map_item)
        self.map_item.setZValue(-100)
        self.path_curve = self.plot.plot([], [], pen=pg.mkPen(width=2, color='w'))
        top.addWidget(self.plot, stretch=3)
        self.range_label = QLabel('Range: -- m')
        self.range_label.setAlignment(Qt.AlignCenter)
        top.addWidget(self.range_label, stretch=1)
        layout.addLayout(top, stretch=1)

        # Bottom: GPR B-scan view
        self.img_view = pg.ImageView(view=pg.PlotItem())
        for btn in (self.img_view.ui.histogram,
                    self.img_view.ui.roiBtn,
                    self.img_view.ui.menuBtn):
            btn.hide()
        v = self.img_view.getView()
        v.enableAutoRange(False)
        v.setAspectLocked(False)
        layout.addWidget(self.img_view, stretch=1)

        # Timer for UI updates
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_ui)
        self.timer.start(30)

    def start_acquisition(self):
        self.running = True
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)

    def stop_acquisition(self):
        self.running = False
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)

    def gpr_cb(self, msg: Image):
        if not self.running:
            return
        self.latest_gpr = self.bridge.imgmsg_to_cv2(msg, 'mono8')

    def odom_cb(self, msg: VehicleOdometry):
        if not self.running:
            return
        if msg.pose_frame == VehicleOdometry.POSE_FRAME_FRD:
            x, y, _ = msg.position
        else:
            xn, yn, _ = msg.position; x, y = yn, xn
        if self.origin is None:
            self.origin = (x, y)
        xr, yr = x - self.origin[0], y - self.origin[1]
        w, xq, yq, zq = msg.q
        yaw = math.atan2(2*(w*zq + xq*yq), 1 - 2*(yq*yq + zq*zq))
        c, s = math.cos(-yaw), math.sin(-yaw)
        xr2 = xr*c - yr*s; yr2 = xr*s + yr*c
        self.path.append((xr2, yr2))

    def range_cb(self, msg: Range):
        if not self.running:
            return
        self.latest_range = msg.range

    def update_map_background(self):
        xs, ys = zip(*self.path)
        buf = 10.0
        min_x, max_x = min(xs)-buf, max(xs)+buf
        min_y, max_y = min(ys)-buf, max(ys)+buf
        ll_lon, ll_lat = self.proj.transform(min_x, min_y)
        ur_lon, ur_lat = self.proj.transform(max_x, max_y)
        # Use OpenStreetMap static tiles
        center_lat = (ll_lat+ur_lat)/2
        center_lon = (ll_lon+ur_lon)/2
        zoom = 15
        url = (
            'https://staticmap.openstreetmap.de/staticmap.php'
            f'?center={center_lat},{center_lon}'
            f'&zoom={zoom}&size=800x800'
        )
        try:
            resp = requests.get(url, timeout=5)
            resp.raise_for_status()
            arr = cv2.imdecode(np.frombuffer(resp.content, np.uint8), cv2.IMREAD_COLOR)
            arr = cv2.cvtColor(arr, cv2.COLOR_BGR2RGB)
            self.map_item.setImage(arr)
            self.map_item.setRect(min_x, min_y, max_x-min_x, max_y-min_y)
            self.map_ready = True
        except Exception:
            self.node.get_logger().error('Failed to fetch map')

    def update_ui(self):
        if self.running:
            if not self.map_ready and len(self.path)>1:
                self.update_map_background()
            if self.path:
                xs, ys = zip(*self.path)
                self.path_curve.setData(xs, ys)
            if self.latest_range is not None:
                self.range_label.setText(f'Range: {self.latest_range:.2f} m')
            if self.latest_gpr is not None:
                img = self.latest_gpr.T
                self.img_view.setImage(img, autoLevels=True)
                h, w = img.shape
                v = self.img_view.getView()
                v.setRange(xRange=(0,w), yRange=(0,h), padding=0)

    def closeEvent(self, event):
        self.executor.shutdown()
        self.spin_thread.join(timeout=1.0)
        self.node.destroy_node()
        rclpy.shutdown()
        event.accept()

if __name__=='__main__':
    app = QApplication(sys.argv)
    gui=TelemetryGUI()
    gui.showMaximized()
    sys.exit(app.exec_())
