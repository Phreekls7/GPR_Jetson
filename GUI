#!/usr/bin/env python3
import sys
import threading
import math

import rclpy
from rclpy.node import Node
from rclpy.executors import SingleThreadedExecutor
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSDurabilityPolicy

from px4_msgs.msg import VehicleOdometry, DistanceSensor
from sensor_msgs.msg import Image
from cv_bridge import CvBridge

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget,
    QVBoxLayout, QHBoxLayout, QLabel
)
from PyQt5.QtCore import QTimer, Qt
import pyqtgraph as pg
import numpy as np

# (Optional) for map projection; can be removed if you stick with grid background:
import requests
import cv2
import pyproj


class TelemetryGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Drone Telemetry')

        # --- ROS2 setup ---
        rclpy.init()
        self.node = Node('telemetry_gui')
        self.executor = SingleThreadedExecutor()
        self.executor.add_node(self.node)
        threading.Thread(target=self.executor.spin, daemon=True).start()

        self.bridge = CvBridge()
        self.path = []
        self.origin = None

        # GPR & DistanceSensor
        self.latest_gpr   = None
        self.latest_range = None
        self.base_range   = None
        self.pix_per_m    = 200  # tune this to align ground

        # QoS
        qos = QoSProfile(depth=10)
        qos.reliability = QoSReliabilityPolicy.BEST_EFFORT
        qos.durability   = QoSDurabilityPolicy.VOLATILE

        # Subscriptions
        self.node.create_subscription(
            Image, '/gpr/bscan', self.gpr_cb, qos)
        self.node.create_subscription(
            DistanceSensor, '/fmu/out/distance_sensor', self.range_cb, qos)
        self.node.create_subscription(
            VehicleOdometry,
            '/fmu/out/vehicle_odometry',
            self.odom_cb,
            qos)

        # (Optional) simple grid background instead of map tiles
        self.plot = pg.PlotWidget(title='Flight Path')
        self.plot.setBackground('w')
        self.plot.showGrid(x=True, y=True)
        self.path_curve = self.plot.plot([], [], pen=pg.mkPen('b', width=2))

        # Build UI
        central = QWidget()
        self.setCentralWidget(central)
        layout = QVBoxLayout(central)

        # Top: flight path + range label
        top = QHBoxLayout()
        top.addWidget(self.plot, stretch=3)

        self.range_label = QLabel('Range: -- m')
        self.range_label.setAlignment(Qt.AlignCenter)
        top.addWidget(self.range_label, stretch=1)

        layout.addLayout(top, stretch=1)

        # Bottom: GPR B-scan view
        self.img_view = pg.ImageView()
        for btn in (self.img_view.ui.histogram,
                    self.img_view.ui.roiBtn,
                    self.img_view.ui.menuBtn):
            btn.hide()
        view = self.img_view.getView()
        view.enableAutoRange(False)
        view.setAspectLocked(False)
        layout.addWidget(self.img_view, stretch=1)

        # UI timer (~30 Hz)
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_ui)
        self.timer.start(33)

    def gpr_cb(self, msg: Image):
        """Receive latest raw GPR B-scan."""
        self.latest_gpr = self.bridge.imgmsg_to_cv2(msg, 'mono8')

    def range_cb(self, msg: DistanceSensor):
        """Receive PX4 DistanceSensor reading; set baseline once."""
        self.latest_range = msg.current_distance
        if self.base_range is None:
            self.base_range = self.latest_range

    def odom_cb(self, msg: VehicleOdometry):
        """Record flight path for plotting."""
        if msg.pose_frame == VehicleOdometry.POSE_FRAME_FRD:
            x, y, _ = msg.position
        else:
            xn, yn, _ = msg.position
            x, y = yn, xn
        if self.origin is None:
            self.origin = (x, y)
        dx, dy = x - self.origin[0], y - self.origin[1]
        w, xq, yq, zq = msg.q
        yaw = math.atan2(2*(w*zq + xq*yq),
                          1 - 2*(yq*yq + zq*zq))
        c, s = math.cos(-yaw), math.sin(-yaw)
        fx = dx*c - dy*s
        fy = dx*s + dy*c
        self.path.append((fx, fy))

    def update_ui(self):
        """Refresh flight path, range label, and leveled GPR B-scan."""
        # Flight path
        if self.path:
            xs, ys = zip(*self.path)
            self.path_curve.setData(xs, ys)

        # Range label
        if self.latest_range is not None:
            self.range_label.setText(
                f'Range: {self.latest_range:.2f} m')

        # GPR B-scan leveling
        if self.latest_gpr is not None:
            img = self.latest_gpr.copy()
            if self.latest_range is not None and self.base_range is not None:
                delta_m = self.latest_range - self.base_range
                shift_px = int(delta_m * self.pix_per_m)
                img = np.roll(img, -shift_px, axis=0)

            disp = img.T
            self.img_view.setImage(disp, autoLevels=True)
            h, w = disp.shape
            self.img_view.getView().setRange(
                xRange=(0, w), yRange=(0, h), padding=0)

    def closeEvent(self, event):
        self.executor.shutdown()
        self.node.destroy_node()
        rclpy.shutdown()
        event.accept()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    gui = TelemetryGUI()
    gui.showMaximized()
    sys.exit(app.exec_())
