#!/usr/bin/env python3
import sys
import threading
import math
import rclpy
from rclpy.node import Node
from rclpy.executors import SingleThreadedExecutor
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSDurabilityPolicy
from px4_msgs.msg import VehicleOdometry
from sensor_msgs.msg import Image, Range
from cv_bridge import CvBridge

from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QHBoxLayout
from PyQt5.QtCore import QTimer, Qt
import pyqtgraph as pg
import numpy as np
import cv2
import requests
import pyproj

class TelemetryGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Drone Telemetry')

        # --- ROS2 init ---
        rclpy.init(args=None)
        self.node = Node('telemetry_gui')
        self.executor = SingleThreadedExecutor()
        self.executor.add_node(self.node)
        self.spin_thread = threading.Thread(target=self.executor.spin, daemon=True)
        self.spin_thread.start()
        self.bridge = CvBridge()

        # --- Subscriptions ---
        odom_qos = QoSProfile(depth=10)
        odom_qos.reliability = QoSReliabilityPolicy.BEST_EFFORT
        odom_qos.durability = QoSDurabilityPolicy.VOLATILE
        self.node.create_subscription(VehicleOdometry, '/fmu/out/vehicle_odometry', self.odom_cb, qos_profile=odom_qos)
        self.node.create_subscription(Range, '/range', self.range_cb, qos_profile=10)
        self.node.create_subscription(Image, '/gpr/bscan', self.gpr_cb, qos_profile=10)

        # --- Data containers ---
        self.path = []
        self.origin = None
        self.latest_range = None
        self.gpr_history = None           # full history of GPR traces
        self.max_gpr_cols = 1000         # display width in pixels

        # --- Build UI ---
        central = QWidget()
        self.setCentralWidget(central)
        layout = QVBoxLayout(central)

        # Top: flight path + range
        top = QHBoxLayout()
        self.plot = pg.PlotWidget(title='Flight Path')
        self.plot.setAspectLocked(True)
        self.path_curve = self.plot.plot([], [], pen=pg.mkPen(width=2, color='w'))
        top.addWidget(self.plot, stretch=3)
        self.range_label = QLabel('Range: -- m')
        self.range_label.setAlignment(Qt.AlignCenter)
        self.range_label.setFixedWidth(150)
        top.addWidget(self.range_label, stretch=1)
        layout.addLayout(top, stretch=1)

        # Bottom: GPR B-scan history
        self.img_view = pg.ImageView(view=pg.PlotItem())
        for btn in (self.img_view.ui.histogram, self.img_view.ui.roiBtn, self.img_view.ui.menuBtn):
            btn.hide()
        iv = self.img_view.getView()
        iv.enableAutoRange(False)
        iv.setAspectLocked(False)
        layout.addWidget(self.img_view, stretch=1)

        # --- Timer for UI updates ---
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_ui)
        self.timer.start(30)  # ~33 Hz

    def gpr_cb(self, msg: Image):
        """Receive full B-scan image, extract latest column, and append to history."""
        img = self.bridge.imgmsg_to_cv2(msg, desired_encoding='mono8')  # shape (H, W)
        col = img[:, -1]  # newest trace
        col = col[:, np.newaxis]
        if self.gpr_history is None:
            self.gpr_history = col
        else:
            self.gpr_history = np.concatenate((self.gpr_history, col), axis=1)

    def odom_cb(self, msg: VehicleOdometry):
        x, y, _ = msg.position if msg.pose_frame == VehicleOdometry.POSE_FRAME_FRD else (msg.position[1], msg.position[0], None)
        if self.origin is None:
            self.origin = (x, y)
        xr, yr = x - self.origin[0], y - self.origin[1]
        w, xq, yq, zq = msg.q
        yaw = math.atan2(2*(w*zq + xq*yq), 1 - 2*(yq*yq + zq*zq))
        c, s = math.cos(-yaw), math.sin(-yaw)
        self.path.append((xr*c - yr*s, xr*s + yr*c))

    def range_cb(self, msg: Range):
        self.latest_range = msg.range

    def update_ui(self):
        # Update flight path
        if self.path:
            xs, ys = zip(*self.path)
            self.path_curve.setData(xs, ys)

        # Update range label
        if self.latest_range is not None:
            self.range_label.setText(f'Range: {self.latest_range:.2f} m')

        # Update GPR history plot
        if self.gpr_history is not None:
            H, W = self.gpr_history.shape
            # always compress/expand history to fixed width for full visibility
            disp = cv2.resize(
                self.gpr_history,
                (self.max_gpr_cols, H),
                interpolation=cv2.INTER_AREA
            )
            # display as image (time on horizontal axis)
            self.img_view.setImage(disp.T, autoLevels=True)
            v = self.img_view.getView()
            # fixed width view
            v.setRange(xRange=(0, self.max_gpr_cols), yRange=(0, H), padding=0))

    def closeEvent(self, event):
        self.executor.shutdown()
        self.spin_thread.join(timeout=1.0)
        self.node.destroy_node()
        rclpy.shutdown()
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    gui = TelemetryGUI()
    gui.showMaximized()
    sys.exit(app.exec_())
