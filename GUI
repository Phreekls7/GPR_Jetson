import sys
import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Image, Range
from cv_bridge import CvBridge

from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QHBoxLayout
from PyQt5.QtCore import QTimer, Qt
import pyqtgraph as pg
import numpy as np

class TelemetryGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Drone Telemetry')
        # ROS2 init
        rclpy.init(args=None)
        self.node = rclpy.create_node('telemetry_gui')
        # Subscribers
        self.node.create_subscription(Image, '/gpr/bscan', self.gpr_cb, 10)
        self.node.create_subscription(Odometry, '/odom', self.odom_cb, 10)
        self.node.create_subscription(Range, '/range', self.range_cb, 10)
        self.bridge = CvBridge()

        # Data containers
        self.path = []  # list of (x,y)
        self.latest_gpr = None
        self.latest_range = None

        # Build UI
        central = QWidget()
        self.setCentralWidget(central)
        layout = QVBoxLayout(central)

        # Top: flight path + range
        top = QHBoxLayout()
        # Flight path plot
        self.plot_widget = pg.PlotWidget(title="Flight Path")
        self.plot_widget.setAspectLocked(True)
        self.path_curve = self.plot_widget.plot([], [], pen=pg.mkPen(width=2))
        top.addWidget(self.plot_widget, stretch=3)
        # Range display
        self.range_label = QLabel("Range: --")
        self.range_label.setAlignment(Qt.AlignCenter)
        self.range_label.setFixedWidth(150)
        top.addWidget(self.range_label, stretch=1)

        layout.addLayout(top, stretch=1)

        # Bottom: GPR B-scan image
        self.img_view = pg.ImageView(view=pg.PlotItem())
        self.img_view.ui.histogram.hide()
        self.img_view.ui.roiBtn.hide()
        self.img_view.ui.menuBtn.hide()
        layout.addWidget(self.img_view, stretch=1)

        # Timer for ROS spin and UI update
        self.timer = QTimer()
        self.timer.timeout.connect(self.update)
        self.timer.start(30)  # 30 ms ~ 33 Hz

    def gpr_cb(self, msg: Image):
        # Convert ROS image to numpy
        img = self.bridge.imgmsg_to_cv2(msg, desired_encoding='mono8')
        self.latest_gpr = img

    def odom_cb(self, msg: Odometry):
        x = msg.pose.pose.position.x
        y = msg.pose.pose.position.y
        self.path.append((x, y))
        # Keep last N points
        if len(self.path) > 1000:
            self.path = self.path[-1000:]

    def range_cb(self, msg: Range):
        self.latest_range = msg.range

    def update(self):
        # Spin ROS once
        rclpy.spin_once(self.node, timeout_sec=0)
        # Update flight path
        if self.path:
            xs, ys = zip(*self.path)
            self.path_curve.setData(xs, ys)
        # Update range label
        if self.latest_range is not None:
            self.range_label.setText(f"Range: {self.latest_range:.2f} m")
        # Update GPR image
        if self.latest_gpr is not None:
            # Show as transposed to orient correctly if needed
            self.img_view.setImage(self.latest_gpr.T, autoLevels=True)

    def closeEvent(self, event):
        # Clean up ROS
        self.node.destroy_node()
        rclpy.shutdown()
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    gui = TelemetryGUI()
    gui.showMaximized()
    sys.exit(app.exec_())
