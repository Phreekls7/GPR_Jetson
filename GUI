import sys
import threading
import math
import rclpy
from rclpy.node import Node
from rclpy.executors import SingleThreadedExecutor

# Messages
from px4_msgs.msg import VehicleOdometry
from sensor_msgs.msg import Image, Range
from cv_bridge import CvBridge

# QoS
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSDurabilityPolicy

# Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QHBoxLayout
from PyQt5.QtCore import QTimer, Qt
import pyqtgraph as pg
import numpy as np

class TelemetryGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Drone Telemetry')

        # ROS2 initialization
        rclpy.init(args=None)
        self.node = Node('telemetry_gui')
        self.executor = SingleThreadedExecutor()
        self.executor.add_node(self.node)
        self.spin_thread = threading.Thread(target=self.executor.spin, daemon=True)
        self.spin_thread.start()

        # Subscriptions
        self.bridge = CvBridge()
        # GPR B-scan
        self.node.create_subscription(Image, '/gpr/bscan', self.gpr_cb, qos_profile=10)
        # Laser range
        self.node.create_subscription(Range, '/range', self.range_cb, qos_profile=10)
        # Vehicle odometry
        odom_qos = QoSProfile(depth=10)
        odom_qos.reliability = QoSReliabilityPolicy.BEST_EFFORT
        odom_qos.durability = QoSDurabilityPolicy.VOLATILE
        self.node.create_subscription(VehicleOdometry,
                                      '/fmu/out/vehicle_odometry',
                                      self.odom_cb,
                                      qos_profile=odom_qos)

        # Data containers
        self.path = []
        self.origin = None
        self.latest_gpr = None
        self.latest_range = None

        # UI layout
        central = QWidget()
        self.setCentralWidget(central)
        layout = QVBoxLayout(central)

        # Top: flight path + range (half height)
        top = QHBoxLayout()
        self.plot = pg.PlotWidget(title='Flight Path')
        self.plot.setAspectLocked(True)
        self.path_curve = self.plot.plot([], [], pen=pg.mkPen(width=2))
        top.addWidget(self.plot, stretch=3)
        self.range_label = QLabel('Range: -- m')
        self.range_label.setAlignment(Qt.AlignCenter)
        self.range_label.setFixedWidth(150)
        top.addWidget(self.range_label, stretch=1)
        layout.addLayout(top, stretch=1)

        # Bottom: GPR image (half height)
        self.img_view = pg.ImageView(view=pg.PlotItem())
        self.img_view.ui.histogram.hide()
        self.img_view.ui.roiBtn.hide()
        self.img_view.ui.menuBtn.hide()
        # Freeze view
        view = self.img_view.getView()
        view.enableAutoRange(False)
        view.setAspectLocked(False)
        layout.addWidget(self.img_view, stretch=1)

        # Timer for UI updates
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_ui)
        self.timer.start(30)

    def gpr_cb(self, msg: Image):
        # Convert to numpy
        self.latest_gpr = self.bridge.imgmsg_to_cv2(msg, 'mono8')

    def odom_cb(self, msg: VehicleOdometry):
        # Choose frame
        if msg.pose_frame == VehicleOdometry.POSE_FRAME_FRD:
            x, y, _ = msg.position
        else:
            xn, yn, _ = msg.position
            x, y = yn, xn
        # Origin centering
        if self.origin is None:
            self.origin = (x, y)
        xr, yr = x - self.origin[0], y - self.origin[1]
        # Yaw rotation
        w, xq, yq, zq = msg.q
        yaw = math.atan2(2*(w*zq + xq*yq), 1 - 2*(yq*yq + zq*zq))
        c, s = math.cos(-yaw), math.sin(-yaw)
        xr2 = xr*c - yr*s
        yr2 = xr*s + yr*c
        self.path.append((xr2, yr2))
        self.node.get_logger().debug(f'Odom â†’ rel=({xr:.2f},{yr:.2f}), yaw={math.degrees(yaw):.1f}')

    def range_cb(self, msg: Range):
        self.latest_range = msg.range

    def update_ui(self):
        # Plot path
        if self.path:
            xs, ys = zip(*self.path)
            self.path_curve.setData(xs, ys)
        # Update range
        if self.latest_range is not None:
            self.range_label.setText(f'Range: {self.latest_range:.2f} m')
        # Show full GPR image
        if self.latest_gpr is not None:
            img = self.latest_gpr.T
            self.img_view.setImage(img, autoLevels=True)
            h, w = img.shape
            v = self.img_view.getView()
            v.setRange(xRange=(0, w), yRange=(0, h), padding=0)

    def closeEvent(self, event):
        # Cleanup
        self.executor.shutdown()
        self.spin_thread.join(timeout=1.0)
        self.node.destroy_node()
        rclpy.shutdown()
        event.accept()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    gui = TelemetryGUI()
    gui.showMaximized()
    sys.exit(app.exec_())
